{
  "name": "t_cricket_database",
  "description": "1. Execute API call to a based on user question . User question would be converted into a SQL Query and passed as a parameter. \n\n2. Another parameter is the cloud database provide which would always be aiven. See sample API endpoint URL call below.\n\n3. Database server is PostGreSQL So make sure that queries are PostGreSQL compliant. Remembers, you need to give the schema name always. Use public schema unless otherwise specific\n\n4. Always use public schema unless otherwise specified.\n\n4. If user refers to database or cricket data or cricket database etc, it is referring to the database connected via this tool.\n\n5. Wait for upto 180  seconds for query response to come in as the server can be slow sometimes\n\n6. Please only share results  from ACTUAL query run and not to share any made up numbers.\n\n7. While sharing results with user, share the SQL used and then the results.",
  "color": "linear-gradient(rgb(194,230,33), rgb(196,37,113))",
  "iconSrc": "",
  "schema": "[{\"id\":0,\"property\":\"sqlquery\",\"description\":\"mysql sql query string based on user question\",\"type\":\"string\",\"required\":true},{\"id\":1,\"property\":\"cloudVar\",\"description\":\"would always be 'aiven'\",\"type\":\"string\",\"required\":true}]",
  "func": "/*\nNOTE FOR TOOL AGENT : Please wait for upto 180  seconds for query response to come in as the server can be slow sometimes\n*/\n\nconst fetch = require('node-fetch');\n\n// Properly encode the query parameters\nconst sqlQuery = encodeURIComponent($sqlquery);\nconst cloudVar = encodeURIComponent($cloudVar);\n\nconst url = `https://cricket-fastapi.hosting.tigzig.com/sqlquery/?sqlquery=${sqlQuery}&cloud=${cloudVar}`;\n\nconst options = {\n    method: 'GET',\n    headers: {\n        'Content-Type': 'application/json'\n    }\n};\n\ntry {\n    const response = await fetch(url, options);\n    const text = await response.text();\n    return text;\n} catch (error) {\n    console.error(error);\n    return '';\n}\n"
}